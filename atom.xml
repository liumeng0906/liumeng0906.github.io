<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-27T11:13:49.548Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hook中的useState、useEffect</title>
    <link href="http://example.com/2020/12/26/Hook/"/>
    <id>http://example.com/2020/12/26/Hook/</id>
    <published>2020-12-26T01:02:04.000Z</published>
    <updated>2020-12-27T11:13:49.548Z</updated>
    
    <content type="html"><![CDATA[<p>Hook 是React 16.8的新增特性。它可以让你在不编写 class的情况下使用 state 以及其他的 React特性。<br>   Hook是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数<br>   Hook 不能在 class 组件中使用<br>   <code>const [state, setState] = useState(initialState)</code><br>   返回一个 state,以及更新 state 的函数<br>   当 state 为引用类型，修改时注意要合并其他值，不然会发生错误<br>   多个 state 最好分开写<br>   setState 也可以接收一个函数<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    function Home()&#123;</span><br><span class="line">        const [count, setCount] &#x3D; useState(0)</span><br><span class="line">        &#x2F;&#x2F;也可以在state里写对象</span><br><span class="line">        const [person, setPerson] &#x3D; useState(&#123;</span><br><span class="line">            name:&#39;大黄&#39;,</span><br><span class="line">            age:&#39;18&#39;,</span><br><span class="line">            sex:&#39;女&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">        const [num,setNum] &#x3D; useState(100)</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                我是todolist</span><br><span class="line">                count:&#123;count&#125;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125;&gt;加+&lt;&#x2F;button&gt;</span><br><span class="line">                &#123;&#x2F;* setCount和class组件setState是一样的都是修改state的状态的*&#x2F;&#125;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    name:&#123;person.name&#125;</span><br><span class="line">                    age:&#123;person.age&#125;</span><br><span class="line">                    sex:&#123;person.sex&#125;</span><br><span class="line">                    &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setPerson(&#123;age:19&#125;)&#125;&#125;&gt;给大黄过年&lt;&#x2F;button&gt;</span><br><span class="line">                    &#123;&#x2F;* 这里当我们点击了按钮调用setState，只修改了age,虽然年龄变成了19，但是其他属性都为空了，所以说</span><br><span class="line">                        在调用setState时，如果它是个引用类型时我们要它另外值合并一下</span><br><span class="line">                        onClick&#x3D;&#123;()&#x3D;&gt;&#123;setPerson(&#123;age:19,name:person.name,sex:person.sex&#125;)&#125;&#125;</span><br><span class="line">                        这样写就没问题了</span><br><span class="line">                    *&#x2F;&#125;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    计数：&#123;num&#125;</span><br><span class="line">                    &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setNum((oval)&#x3D;&gt;&#123;console.log(oval);return oval+1&#125;)&#125;&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">                    &#123;&#x2F;* setState还可以接收一个函数 *&#x2F;&#125;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    export default Home</span><br><span class="line">   </span><br><span class="line">    &#x2F;&#x2F;useEffect!!</span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;&#x2F;&#x2F;参数是个函数：也叫副作用函数</span><br><span class="line">         return ()&#x3D;&gt;&#123;&#125;&#x2F;&#x2F;返回函数 返回的函数式可选的  可以不写返回函数</span><br><span class="line">     &#125;,[])&#x2F;&#x2F;这里的数组是依赖参数   依赖也是可选的</span><br><span class="line">    作用函数：</span><br><span class="line">     1.当useEffect ,没有依赖参数时，副作用函数，会在组件挂载完成及组件更新完成时执行</span><br><span class="line">     2.当有依赖参数副作用函数，会在组件挂载完成及改依赖参数修改，引起的组件更新完成之后执行</span><br><span class="line">     3.当依赖参数为空数组时，会在组件挂载完成之后执行</span><br><span class="line">     4.返回函数在组件更新完成，或即将写在执行，一般返回函数用在即将卸载时</span><br><span class="line">     useEffect(()&#x3D;&gt;&#123;&#x2F;&#x2F;当没有依赖参数和返回函数的时候，现在就相当于class组件的componentDidMount、componentUpdate生命周期</span><br><span class="line">    console.log(1,&#39;useEffect&#39;)&#x2F;&#x2F;一直触发btn，一直在打印</span><br><span class="line">&#125;)</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;&#x2F;&#x2F;当依赖参数为空和没有返回函数时，只执行了一次，后面在触发btn时，不在执行.相当于componentDidMount</span><br><span class="line">    console.log(2,&#39;useEffect&#39;)</span><br><span class="line">&#125;,[])</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">    console.log(3,&#39;useEffect&#39;)</span><br><span class="line">&#125;,[name])&#x2F;&#x2F;在有依赖参数时，组件挂载完会执行一次，在后面触发btn时，如果依赖参数没有发生改变，不会再打印</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">    return ()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(4,&#39;useEffect&#39;)</span><br><span class="line">    &#125;&#x2F;&#x2F;当没有依赖，有返回函数的时候，初次挂载完返回函数不会执行，但是当触发btn时，就是组件发生改变，它就会执行返回函数的代码</span><br><span class="line">&#125;,)&#x2F;&#x2F;如果此处有依赖，但不空，那就当依赖的参数发生改变的时候，返回函数内的代码也会执行</span><br><span class="line">useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">    return ()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(&#39;更新或者卸载&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[count])&#x2F;&#x2F;也可以有依赖参数并且会更新用返回函数进行卸载或更新</span><br><span class="line">&#x2F;&#x2F;缺点：挂载前和更新前的生命周期要用到别的方法来配合使用useEffect。这里更多的是挂载完和更新完</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hook 是React 16.8的新增特性。它可以让你在不编写 class的情况下使用 state 以及其他的 React特性。&lt;br&gt;   Hook是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数&lt;br&gt;   Hook 不能在 class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/25/hello-world/"/>
    <id>http://example.com/2020/12/25/hello-world/</id>
    <published>2020-12-25T01:36:20.562Z</published>
    <updated>2020-12-25T01:36:20.562Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>手写Promise</title>
    <link href="http://example.com/2018/05/25/%E6%89%8B%E5%86%99Promise/"/>
    <id>http://example.com/2018/05/25/%E6%89%8B%E5%86%99Promise/</id>
    <published>2018-05-25T14:10:50.000Z</published>
    <updated>2020-12-27T12:35:16.339Z</updated>
    
    <content type="html"><![CDATA[<p><font> 手写Promise  主要是解决回调地狱的问题，在ES6中出现了promise来解决这个问题，但是同样也带来了多个.then()的问题<br>    //随着es7 async和await到来可以说彻底解决回调地狱。<br>    new Promise() //是谁执行了？直接new一个Promise是内置构造Promise执行了，但是它会报错。因为这里缺一个回调函数，平常大家也都是这么用的<br>    new Promise(()=&gt;{<br>       console.log(‘你大爷’)//‘你大爷’会执行吗？：这里new了一个Promose,Promise执行一次，那里面的回调函数也会执行，所以‘你大爷’成功被打印<br>    })<br>    function fn(callBack){</p><pre><code>&#125;new fn(()=&gt;&#123;&#125;)//fn执行，但是里面的回调并没有，Promise的回调会执行。//new Promise 是内置构造函数Promise执行一次//Promise的回调函数也会执行一次，这个回调函数会给我们提供两个形参（函数）：成功、失败//Promise的回调函数，又有两个参数分别是：resolve、reject两个函数//Promise类的实例没有then方法，应该是原型对象的方法var obj = new Promise((resolve,rejecct)=&gt;&#123;     console.log(resolve,reject)//两个函数&#125;)//obj是Promise的一个实例// 手写function myPromise(callBack)&#123;//接受传进来的回调函数    //状态属性    this.status=&#39;pending&#39;    //回调函数    callBack(resolve.bind(this),reject.bing(this))    //定义一个成功的函数    function resolve(hello,           params)&#123;        //那么console.log(hello)肯定是执行的（很早演示时写）        //修改状态（后写）        if(this.status===&#39;pending&#39;)&#123;//如果出事状态为pengding,            this.status=&#39;success&#39;//那就把它改成success成功            //这里还有一个上下文的问题。成功时resolve是怎么调用的？是函数名+小括号，也就是window.            //但这里就不该用window，因为将来获取服务器的数据实在.then()里的来获取。所以我们在初始化时就要给            //resolve和reject绑死这个类的实例：resolve.bind(this)  reject.bing(this) 走起上面绑死↑            //否则你在调用resolve和reject时他们就会指向window            //为什么绑死上下文为这个类的实例？因为我们要借用这个类的实例的成功和失败的方法74行里面成功与失败的回调            //所以↓            this.successCallBack(params)//这个是谁？它就是then的第一个参数也就是成功的回调，所以把参数直接注进来就行了            //失败同样        &#125;    &#125;    //定义一个失败的函数    function reject(err)&#123;        if(this.status===&#39;pending&#39;)&#123;            this.status=&#39;faile&#39;            this.faileCallBack(err)        &#125;    &#125;&#125;//调用new myPromise(()=&gt;&#123;//并且传进去一个回调函数。但是我们在实际运用中肯定要传2个参数进去。resolve,reject,并且37行回调也要接受这个2个函数    //console.log(&#39;我是Promise&#39;)//这里肯定会执行。打印。    //假如这里调用并传参resolve(&#39;hello&#39;)    //处理异步,一般promise就是处理异步的    setTimeout(()=&gt;&#123;        resolve(&#39;我是promise&#39;)    &#125;)&#125;)//假如我们是在处理异步请求那么肯定要在这.then()。但是能直接.then()吗？要注意.then()是在原型上面的。虽然链式语法可以这么写，但是这里并没有这个方法。.then()应该是原型上面类的原型的方法.then((data)=&gt;&#123;    console.log(data)&#125;,()=&gt;&#123;&#125;)//一般我们在调用then()的时候肯定要传2个参数进去，下面接收，就是相当于将then方法里面成功与失败的回调函数当做当前类的实例即可，当前类是谁？promise//所以原型上定义一个then的方法，应该是myPromise.prototype.then=function(success,faile)&#123;//接收上面调用then时传进来的来个函数。就是将then方法里面成功与失败的回到函数作为当前类的实例即可    this.successCallBack=success//相当于then传进一个成功的函数给了success,就是给myPromise的实例动态添加了属性就是success这个成功的箭头函数。还有一个失败的同样     this.faileCallBack=faile    //then()的两个函数相当于作为这个实例的两个方法&#125;//53行异步成功后执行，就是相当于调用了41行那个方法。失败同样//因为promise有3中状态，pending、成功、失败。所以此时我去上面给类定义个状态的属性，走起↑//如果说异步解决成功就调用resolve方法 。resolve就是41行函数执行。但是我们都是在then()来获取成功或失败的数据，(其实就是调用this.successCallBack，this.faileCallBack)。所以走起去上面↑，就是修改promise的状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(()&#x3D;&gt;&#123;</span><br><span class="line">    window.myPromise&#x3D;function(callBack)&#123;</span><br><span class="line">        &#x2F;&#x2F;状态属性</span><br><span class="line">        this.status&#x3D;&#39;pending&#39;</span><br><span class="line">        &#x2F;&#x2F;回调函数</span><br><span class="line">        callBack(resolve.bind(this),reject.bind(this))</span><br><span class="line">        &#x2F;&#x2F; 成功</span><br><span class="line">        function resolve(params)&#123;</span><br><span class="line">            if(this.status&#x3D;&#x3D;&#x3D;&#39;pending&#39;)&#123;</span><br><span class="line">                this.status&#x3D;&#39;success&#39;</span><br><span class="line">                this.successCallBack(params)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 失败</span><br><span class="line">        function reject(err)&#123;</span><br><span class="line">            if(this.status&#x3D;&#x3D;&#x3D;&#39;pending&#39;)&#123;</span><br><span class="line">                this.status&#x3D;&#39;faile&#39;</span><br><span class="line">                this.successCallBack(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;原型上定义一个then的方法</span><br><span class="line">    myPromise.prototype.then&#x3D;function(success,faile)&#123;</span><br><span class="line">        this.successCallBack&#x3D;success</span><br><span class="line">        this.faileCallBack&#x3D;faile</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">var obj &#x3D; new myPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">    setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">        resolve(&#39;你真好&#39;)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">&#125;).then((data)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(data)&#x2F;&#x2F;成功执行</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font&gt; 手写Promise  主要是解决回调地狱的问题，在ES6中出现了promise来解决这个问题，但是同样也带来了多个.then()的问题&lt;br&gt;    //随着es7 async和await到来可以说彻底解决回调地狱。&lt;br&gt;    new Promise() </summary>
      
    
    
    
    
  </entry>
  
</feed>
